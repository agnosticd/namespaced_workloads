---
- name: Save AgnosticD user data
  agnosticd.core.agnosticd_user_info:
    data:
      sandbox_openshift_namespace: "{{ sandbox_openshift_namespace }}"
      sandbox_openshift_user: "{{ sandbox_openshift_user }}"
      sandbox_openshift_password: "{{ sandbox_openshift_password }}"
      sandbox_openshift_api_token: "{{ sandbox_openshift_api_token }}"
      sandbox_openshift_api_url: "{{ sandbox_openshift_api_url }}"
      sandbox_openshift_console_url: "{{ sandbox_openshift_console_url }}"

- name: Set up workshop config on cluster as cluster admin
  module_defaults:
    group/k8s:
      host: "{{ sandbox_openshift_api_url }}"
      api_key: "{{ cluster_admin_agnosticd_sa_token }}"
      validate_certs: false
  block:
  - name: Create namespaces
    vars:
      _ns_private_lmaas_namespace: "{{ namespace_prefix }}-{{ guid }}"
    kubernetes.core.k8s:
      state: present
      template: namespace.yaml.j2
    loop: "{{ ns_private_lmaas_namespace_prefixes }}"
    loop_control:
      loop_var: namespace_prefix

  - name: Create rolebindings
    vars:
      _ns_private_lmaas_namespace: "{{ namespace_prefix }}-{{ guid }}"
    kubernetes.core.k8s:
      state: present
      template: rolebinding.yaml.j2
    loop: "{{ ns_private_lmaas_namespace_prefixes }}"
    loop_control:
      loop_var: namespace_prefix

  - name: Create DevWorkspace
    vars:
      _ns_private_lmaas_namespace_devspaces: "{{ ns_private_lmaas_namespace_devspaces }}-{{ guid }}"
    kubernetes.core.k8s:
      state: present
      template: devworkspace.yaml.j2

  - name: Wait for DevWorkspace to be ready and get route
    when: ns_private_lmaas_devworkspace_start | bool
    vars:
      _ns_private_lmaas_namespace_devspaces: "{{ ns_private_lmaas_namespace_devspaces }}-{{ guid }}"
    block:
    - name: Wait for DevWorkspace to be ready
      kubernetes.core.k8s_info:
        api_version: workspace.devfile.io/v1alpha2
        kind: DevWorkspace
        name: "{{ ns_private_lmaas_namespace_devspace_name }}"
        namespace: "{{ _ns_private_lmaas_namespace_devspaces }}"
        wait: true
        wait_sleep: 3
        wait_timeout: 120
        wait_condition:
          type: "Ready"
          status: "True"
      register: r_devworkspace

    - name: Debug DevWorkspace status
      ansible.builtin.debug:
        msg: "{{ r_devworkspace }}"

    - name: Save DevWorkspace route
      agnosticd.core.agnosticd_user_info:
        data:
          devworkspace_route: "{{ r_devworkspace.resources[0].status.mainUrl }}"

# TBD: Either dynamically create access - or use MaaS Sandbox API when it's implemented
#      Until then the values come from the AgV config (with the token vaulted)
- name: Save MaaS access credentials
  when: ns_private_lmaas_models | default([]) | length > 0
  agnosticd.core.agnosticd_user_info:
    data:
      "ns_private_lmaas_model_{{ model_index }}_url": "{{ model.url }}"
      "ns_private_lmaas_model_{{ model_index }}_name": "{{ model.name }}"
      "ns_private_lmaas_model_{{ model_index }}_token": "{{ model.token }}"
  loop: "{{ ns_private_lmaas_models }}"
  loop_control:
    loop_var: model
    index_var: model_index
    label: "{{ model.name }}"
